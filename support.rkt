#lang plait

;; =============================================================================
;; Interpreter: support.rkt
;; =============================================================================

;; DO NOT EDIT THIS FILE =======================================================

(define-type Value
  (v-num [value : Number])
  (v-str [value : String])
  (v-bool [value : Boolean]))

(define-type Expr
  (e-num [value : Number])
  (e-str [value : String])
  (e-bool [value : Boolean]))

(define-syntax-rule (~a arg ...)
  (foldl (lambda (val string)
                 (string-append string val))
         ""
         (list (to-string arg) ...)))

(define (parse [input : S-Exp]): Expr
  (cond
    [(s-exp-number? input) (e-num (s-exp->number input))]
    [(s-exp-string? input) (e-str (s-exp->string input))]
    [(s-exp-match? `true input) (e-bool #t)]
    [(s-exp-match? `false input) (e-bool #f)]))